name: CI - Tests and Quality Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend

jobs:
  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_DB: aitrpg_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Generate Prisma client
        working-directory: ./backend
        run: npx prisma generate

      - name: Run database migrations
        working-directory: ./backend
        run: |
          echo "Running database migrations..."
          npx prisma migrate deploy
          echo "Verifying database schema..."
          npx prisma db push --accept-data-loss
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/aitrpg_test

      - name: Verify database schema
        working-directory: ./backend
        run: |
          echo "Checking if users table exists..."
          npx prisma db execute --stdin <<EOF
          SELECT table_name FROM information_schema.tables 
          WHERE table_schema = 'public' AND table_name = 'users';
          EOF
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/aitrpg_test

      - name: Seed test database
        working-directory: ./backend
        run: |
          echo "Seeding test database..."
          npm run prisma:seed
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/aitrpg_test

      - name: Run backend tests
        working-directory: ./backend
        run: npm test
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/aitrpg_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-jwt-secret
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

      - name: Run backend lint
        working-directory: ./backend
        run: npm run lint

      - name: Run backend type check
        working-directory: ./backend
        run: npm run typecheck

      - name: Upload backend test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test

      - name: Run frontend lint
        working-directory: ./frontend
        run: npm run lint

      - name: Run frontend type check
        working-directory: ./frontend
        run: npm run type-check

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build
        env:
          VITE_API_URL: http://localhost:3000/api
          VITE_WS_URL: ws://localhost:3000

      - name: Upload frontend test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Security Scans
  security-scan:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk to check for vulnerabilities (Backend)
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=backend/package.json

      - name: Run Snyk to check for vulnerabilities (Frontend)
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --file=frontend/package.json

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Build Status Check
  build-status:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan]
    if: always()

    steps:
      - name: Check build status
        run: |
          if [[ "${{ needs.backend-tests.result }}" == "success" && 
                "${{ needs.frontend-tests.result }}" == "success" ]]; then
            echo "✅ All tests passed successfully!"
            exit 0
          else
            echo "❌ Some tests failed!"
            exit 1
          fi