name: CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/ci.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    
    # PostgreSQL service (official image)
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      working-directory: backend
      run: npm ci

    - name: Generate Prisma Client
      working-directory: backend
      run: npx prisma generate

    - name: Setup pgvector extension
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client git build-essential
        # Wait for PostgreSQL to be ready
        until pg_isready -h localhost -p 5432 -U test_user; do
          echo "Waiting for PostgreSQL to be ready..."
          sleep 2
        done
        # Install pgvector extension in the container
        docker exec $(docker ps -q -f "ancestor=postgres:14") bash -c '
          apt-get update && 
          apt-get install -y git build-essential postgresql-server-dev-14 && 
          git clone --branch v0.8.0 https://github.com/pgvector/pgvector.git && 
          cd pgvector && 
          make && 
          make install
        '
        # Create vector extension in database
        PGPASSWORD=test_password psql -h localhost -p 5432 -U test_user -d test_db -c "CREATE EXTENSION IF NOT EXISTS vector;"
        # Verify vector extension is working
        PGPASSWORD=test_password psql -h localhost -p 5432 -U test_user -d test_db -c "SELECT extname, extversion FROM pg_extension WHERE extname = 'vector';"

    - name: Run database migrations
      working-directory: backend
      run: npx prisma db push
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db

    - name: Run TypeScript type checking
      working-directory: backend
      run: npm run typecheck

    - name: Run linting
      working-directory: backend
      run: npm run lint

    - name: Run core tests
      working-directory: backend
      run: npm run test:core
      if: ${{ !contains(github.event.head_commit.message, '[full-test]') && !contains(github.event.pull_request.title, '[full-test]') }}
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        JWT_SECRET: test-secret
        NODE_ENV: test

    - name: Run full tests
      working-directory: backend
      run: npm test
      if: ${{ contains(github.event.head_commit.message, '[full-test]') || contains(github.event.pull_request.title, '[full-test]') }}
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'test-key' }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY || 'test-key' }}
        PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY || 'test-key' }}
        PINECONE_ENVIRONMENT: ${{ secrets.PINECONE_ENVIRONMENT || 'test-env' }}
        JWT_SECRET: ${{ secrets.JWT_SECRET || 'test-secret' }}
        NODE_ENV: test

    - name: Build project
      working-directory: backend
      run: npm run build